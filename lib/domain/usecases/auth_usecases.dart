import 'package:injectable/injectable.dart';
import '../entities/user_entity.dart';
import '../repositories/auth_repository.dart';
import '../../core/services/auth_service.dart';

/// Casos de uso para autenticaci√≥n
/// 
/// Maneja toda la l√≥gica de negocio relacionada con autenticaci√≥n
/// y coordina entre el repositorio y los servicios locales
@injectable
class AuthUseCases {
  final AuthRepository _authRepository;
  static const String _logTag = 'AuthUseCases';

  AuthUseCases(this._authRepository);

  /// Obtiene el usuario actualmente autenticado
  Future<UserEntity?> getCurrentUser() async {
    try {
      print('üîç $_logTag: Getting current user...');
      final user = await _authRepository.getCurrentUser();
      
      if (user != null) {
        // Sincronizar estado local
        await AuthService.markUserAuthenticated();
        print('‚úÖ $_logTag: Current user found: ${user.email}');
      } else {
        print('üë§ $_logTag: No current user found');
      }
      
      return user;
    } catch (e) {
      print('‚ùå $_logTag: Error getting current user: $e');
      return null;
    }
  }

  /// Inicia sesi√≥n con Google
  Future<AuthResult> signInWithGoogle() async {
    try {
      print('üîê $_logTag: Starting Google sign in...');
      
      final user = await _authRepository.signInWithGoogle();
      
      // Sincronizar con estado local
      await AuthService.markUserAuthenticated();
      
      print('‚úÖ $_logTag: Google sign in successful: ${user.email}');
      return AuthResult.success(user);
      
    } catch (e) {
      print('‚ùå $_logTag: Google sign in failed: $e');
      return AuthResult.failure(_mapErrorToMessage(e.toString()));
    }
  }

  /// Inicia sesi√≥n con email y contrase√±a
  Future<AuthResult> signInWithEmailPassword(String email, String password) async {
    try {
      print('üîê $_logTag: Starting email sign in for: $email');
      
      // Validaciones b√°sicas
      if (email.isEmpty || password.isEmpty) {
        return AuthResult.failure('Email y contrase√±a son requeridos');
      }
      
      if (!_isValidEmail(email)) {
        return AuthResult.failure('Formato de email inv√°lido');
      }
      
      final user = await _authRepository.signInWithEmailPassword(email, password);
      
      // Sincronizar con estado local
      await AuthService.markUserAuthenticated();
      
      print('‚úÖ $_logTag: Email sign in successful: ${user.email}');
      return AuthResult.success(user);
      
    } catch (e) {
      print('‚ùå $_logTag: Email sign in failed: $e');
      return AuthResult.failure(_mapErrorToMessage(e.toString()));
    }
  }

  /// Registra un nuevo usuario con email y contrase√±a
  Future<AuthResult> signUpWithEmailPassword(String email, String password) async {
    try {
      print('üîê $_logTag: Starting email sign up for: $email');
      
      // Validaciones
      if (email.isEmpty || password.isEmpty) {
        return AuthResult.failure('Email y contrase√±a son requeridos');
      }
      
      if (!_isValidEmail(email)) {
        return AuthResult.failure('Formato de email inv√°lido');
      }
      
      if (password.length < 6) {
        return AuthResult.failure('La contrase√±a debe tener al menos 6 caracteres');
      }
      
      final user = await _authRepository.signUpWithEmailPassword(email, password);
      
      // Sincronizar con estado local
      await AuthService.markUserAuthenticated();
      
      print('‚úÖ $_logTag: Email sign up successful: ${user.email}');
      return AuthResult.success(user);
      
    } catch (e) {
      print('‚ùå $_logTag: Email sign up failed: $e');
      return AuthResult.failure(_mapErrorToMessage(e.toString()));
    }
  }

  /// Cierra sesi√≥n del usuario
  Future<bool> signOut() async {
    try {
      print('üîì $_logTag: Starting sign out...');
      
      await _authRepository.signOut();
      
      // Limpiar estado local
      await AuthService.signOut();
      
      print('‚úÖ $_logTag: Sign out successful');
      return true;
      
    } catch (e) {
      print('‚ùå $_logTag: Sign out failed: $e');
      return false;
    }
  }

  /// Env√≠a email de reseteo de contrase√±a
  Future<bool> resetPassword(String email) async {
    try {
      print('üîÑ $_logTag: Sending password reset to: $email');
      
      if (!_isValidEmail(email)) {
        return false;
      }
      
      await _authRepository.resetPassword(email);
      
      print('‚úÖ $_logTag: Password reset email sent');
      return true;
      
    } catch (e) {
      print('‚ùå $_logTag: Password reset failed: $e');
      return false;
    }
  }

  /// Contin√∫a como invitado (sin autenticaci√≥n)
  Future<void> continueAsGuest() async {
    try {
      print('üë§ $_logTag: Continuing as guest...');
      
      // Marcar en estado local como invitado
      await AuthService.markUserAsGuest();
      
      print('‚úÖ $_logTag: Guest mode activated');
    } catch (e) {
      print('‚ùå $_logTag: Error setting guest mode: $e');
    }
  }

  /// Actualiza las preferencias del usuario
  ///
  /// ‚úÖ SIMPLIFICADO: updateUserPreferences sin Firebase
  Future<bool> updateUserPreferences({required bool acceptedMarketing}) async {
    try {
      // ‚úÖ ELIMINADO: No usar ni SharedPreferences ni Firebase
      // Solo manejar en memoria durante la sesi√≥n actual
      print('‚úÖ $_logTag: User preferences handled locally in session');
      return true;
      
    } catch (e) {
      print('‚ùå $_logTag: Error updating preferences: $e');
      return false;
    }
  }

  // M√âTODOS PRIVADOS

  bool _isValidEmail(String email) {
    return RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(email);
  }

  String _mapErrorToMessage(String error) {
    // Mapear errores espec√≠ficos de Firebase a mensajes amigables
    if (error.contains('invalid-credentials')) {
      return 'Credenciales inv√°lidas. Verifica tu email y contrase√±a.';
    } else if (error.contains('email-already-in-use')) {
      return 'Este email ya est√° registrado. Intenta iniciar sesi√≥n.';
    } else if (error.contains('weak-password')) {
      return 'La contrase√±a es muy d√©bil. Usa al menos 6 caracteres.';
    } else if (error.contains('user-not-found')) {
      return 'No se encontr√≥ una cuenta con este email.';
    } else if (error.contains('wrong-password')) {
      return 'Contrase√±a incorrecta.';
    } else if (error.contains('too-many-requests')) {
      return 'Demasiados intentos. Intenta de nuevo m√°s tarde.';
    } else if (error.contains('network-error')) {
      return 'Error de conexi√≥n. Verifica tu internet.';
    } else if (error.contains('cancelled')) {
      return 'Inicio de sesi√≥n cancelado.';
    } else {
      return 'Error inesperado. Intenta de nuevo.';
    }
  }
}

/// Resultado de operaciones de autenticaci√≥n
class AuthResult {
  final bool isSuccess;
  final UserEntity? user;
  final String? errorMessage;

  AuthResult._({
    required this.isSuccess,
    this.user,
    this.errorMessage,
  });

  factory AuthResult.success(UserEntity user) {
    return AuthResult._(isSuccess: true, user: user);
  }

  factory AuthResult.failure(String message) {
    return AuthResult._(isSuccess: false, errorMessage: message);
  }
}
